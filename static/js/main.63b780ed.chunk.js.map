{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editingTemplate","className","onSubmit","event","preventDefault","editTask","id","htmlFor","name","type","value","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","Form","setName","addTask","autoComplete","FilterButton","aria-pressed","isPressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","filter","filterList","map","tasks","setTasks","editedTaskList","replace","length","taskList","tasksNoun","headingText","updatedTasks","remainingTasks","newTask","nanoid","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63b780ed.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function Todo(props) {\r\n\r\n    const [isEditing, setEditing] = useState(false);\r\n\r\n    const [newName, setNewName] = useState('');\r\n\r\n    function handleChange(event) {\r\n        setNewName(event.target.value);\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.editTask(props.id, newName);\r\n        setNewName(\"\");\r\n        setEditing(false);\r\n    }\r\n\r\n    // the editing template is for when we are editing a todo\r\n    const editingTemplate = (\r\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    New name for {props.name}\r\n                </label>\r\n                <input\r\n                    id={props.id}\r\n                    className=\"todo-text\"\r\n                    type=\"text\"\r\n                    value={newName}\r\n                    onChange={handleChange}\r\n                />\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn todo-cancel\"\r\n                    onClick={() => setEditing(false)}\r\n                >\r\n                    Cancel\r\n                    <span className=\"visually-hidden\">new name for {props.name}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n    // the view template is for when we are just viewing a todo\r\n    const viewTemplate = (\r\n        <div className=\"stack-small\">\r\n            <div className=\"c-cb\">\r\n                <input\r\n                    id={props.id}\r\n                    type=\"checkbox\"\r\n                    defaultChecked={props.completed}\r\n                    onChange={() => props.toggleTaskCompleted(props.id)}\r\n                />\r\n                <label className=\"todo-label\" htmlFor={props.id}>\r\n                    {props.name}\r\n                </label>\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn\"\r\n                    onClick={() => setEditing(true)}\r\n                >\r\n                    Edit <span className=\"visually-hidden\">\r\n                        {props.name}\r\n                    </span>\r\n                </button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn__danger\"\r\n                    onClick={() => props.deleteTask(props.id)}\r\n                >\r\n                    Delete <span className=\"visually-hidden\">\r\n                        {props.name}\r\n                    </span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        // conditional rendering with ternary operator\r\n        // if isEditing is true you see the editingTemplate\r\n        // otherwise you will see the viewTemplate\r\n        <li className=\"todo\">\r\n            {isEditing ? editingTemplate : viewTemplate}\r\n        </li>\r\n    );\r\n}","import React, { useState } from 'react';\r\n\r\nfunction Form(props) {\r\n\r\n    const [name, setName] = useState('');\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        props.addTask(name);\r\n        setName('');\r\n    }\r\n\r\n    function handleChange(event) {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2 className=\"label-wrapper\">\r\n                <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n                    What do you have on your plate today?\r\n          </label>\r\n            </h2>\r\n            <input\r\n                type=\"text\"\r\n                id=\"new-todo-input\"\r\n                className=\"input input__lg\"\r\n                name=\"text\"\r\n                autoComplete=\"off\"\r\n                value={name}\r\n                onChange={handleChange}\r\n            />\r\n            <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n                Add\r\n        </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nfunction FilterButton(props) {\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className=\"btn toggle-btn\"\r\n            aria-pressed={props.isPressed}\r\n            onClick={() => props.setFilter(props.name)}\r\n        >\r\n            <span className=\"visually-hidden\">Show </span>\r\n            <span>{props.name}</span>\r\n            <span className=\"visually-hidden\"> tasks</span>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default FilterButton;","import React, { useState } from 'react';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport FilterButton from './components/FilterButton';\nimport { nanoid } from \"nanoid\";\n\n// FILTER_MAP AND FILTER_NAMES ARE DEFINED OUTSIDE THE APP FUNCTION BECAUSE \n// INSIDE THEY WOULD BE RECALCULATED EVERY TIME APP \n// COMPONENT RE-RENDERS! THIS INFO IS CONSTANT, IT WON'T \n// CHANGE REGARDLESS OF WHAT THE APPLICATION DOES\n\n// values are functions used to filter the tasks data array\n// All shows all tasks, returns true for all tasks\n// Active shows tasks w/ completed prop set to false\n// Completed shows tasks w/ completed prop set to true\nconst FILTER_MAP = {\n  All: () => true,\n  Active: (task) => !task.completed,\n  Completed: (task) => task.completed,\n};\n\n// collect an array of filter names\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  // reads and sets a filter, default is All so all tasks initially shown\n  const [filter, setFilter] = useState('All');\n\n  const filterList = FILTER_NAMES.map((name) => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n\n  function addTask(name) {\n    // Prevents adding an empty task\n    if (name.replace(/\\s/g, '').length) {\n      const newTask = {\n        id: 'todo-' + nanoid(),\n        name: name,\n        completed: false\n      };\n      setTasks([...tasks, newTask]);\n    }\n  }\n\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map((task) => {\n      // if this task has the same ID as the edited task\n      if (id === task.id && newName.replace(/\\s/g, '').length) {\n        //use object spread to make a new object that\n        // has the name set as the new name provided\n        return { ...task, name: newName }\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map((task) => (\n      <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    ));\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has THE SAME ID as the EDITED TASK\n      if (id === task.id) {\n        //use object spread to make a new object\n        //that has the 'completed' prop inverted\n        return { ...task, completed: !task.completed }\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    //provide setTasks with an array of a copy of the existing tasks\n    //EXCEPT for the one where the ID matches the id passed into deleteTask()\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>Todo List!</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\n  { id: \"todo-2\", name: \"Learn React\", completed: false }\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}